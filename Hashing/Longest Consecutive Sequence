public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int longestConsecutive(final List<Integer> A) {
        
        // ---------------- O (log n) --------------------
        // ArrayList<Integer> arr = new ArrayList<>();
        // for(int i = 0; i < A.size(); i++) {
        //     if(!arr.contains(A.get(i)) ) {
        //         arr.add(A.get(i));
        //     }
        // }
        // Collections.sort(arr);
        
        // int ans = 1, curr = 1;
        
        // for(int i = 1; i < arr.size(); i++) {
        //     if(arr.get(i) == arr.get(i - 1) + 1) curr++;
        //     else {
        //         ans = Math.max(ans, curr);
        //         curr = 1;
        //     }
        // }
        
        // ans = Math.max(ans, curr);
        // return ans;
        
        // --------------------- O (n) --------------------------
        
        Set<Integer> hs = new HashSet<>();
        for (int i = 0; i < A.size(); i++) {
            hs.add(A.get(i));
        }
        
        int max = 0;
        for (int i = 0; i < A.size(); i++) {
            if(!hs.contains(A.get(i) - 1)) {
                int curr = 1, num = A.get(i) + 1;
                while (hs.contains(num)) {
                    curr++;
                    num++;
                }
                max = Math.max(curr, max);
            }
        }
        return max;
    }
}
