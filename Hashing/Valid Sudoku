public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    private static boolean straight(char[][] board, int cr) {
        Set<Character> hm = new HashSet<>();
        for(int i = 0; i < board[0].length; i++) {
            char k = board[cr][i];
            if(k == '.') continue;
            if(hm.contains(k)) return false;
            hm.add(k);
        }
        return true;
    }
    
    private static boolean down(char[][] board, int cc) {
        Set<Character> hm = new HashSet<>();
        for(int i = 0; i < board.length; i++) {
            char k = board[i][cc];
            if(k == '.') continue;
            if(hm.contains(k)) return false;
            hm.add(k);
        }
        return true;
    }
    
    private static boolean box(char[][] board, int cr, int cc) {
        Set<Character> hm = new HashSet<>();
        for(int i = cr; i < cr + 3; i++) {
            for (int j = cc; j < cc + 3; j++){
                char k = board[i][j];
                // System.out.print(k + " ");
                if(k == '.') continue;
                if(hm.contains(k)) return false;
                hm.add(k);
            }
        }
        return true;
    }
    
    private boolean Sudoku(char[][] board) {
        for(int i = 0; i < board.length; i++) if(!straight(board, i)) return false;
        
        for(int i = 0; i < board[0].length; i++) if(!down(board, i)) return false;
        
        for(int i = 0; i <= board.length - 3; i += 3) {
            for (int j = 0; j <= board[0].length - 3; j += 3){
                // System.out.println(i + " " + j + " ele- ");
                if(!box(board, i, j)) return false;
            }
        }
        return true;
    }
    
    private static char[][] convert(List<String> A){
        int n = A.size();
        char[][] board = new char[n][n];
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                board[i][j] = A.get(i).charAt(j);
            }
        }
        return board;
    }
    
    public int isValidSudoku(final List<String> A) {
        char[][] board = convert(A);
        boolean y = Sudoku(board);
        if(y) return 1;
        return 0;
    }
}
