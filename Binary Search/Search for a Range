public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    static int firstocc( final List<Integer> A, int B ){
        int l=0, r= A.size()-1;
        while( l<=r ){
            int mid = (l+r)/2;
            if(A.get(mid)==B){
                if( mid-1>=0 && A.get(mid-1)==B) r= mid-1;
                else return mid;
            }else if(A.get(mid)>B) r= mid-1;
            else l= mid+1;
        }
        
        return -1;
    }
    
    static int lastocc( final List<Integer> A, int B ){
        int l=0, r= A.size()-1;
        while( l<=r ){
            int mid = (l+r)/2;
            if(A.get(mid)==B){
                if( mid+1<A.size() && A.get(mid+1)==B) l= mid+1;
                else return mid;
            }else if(A.get(mid)>B) r= mid-1;
            else l= mid+1;
        }
        
        return -1;
    }
    
    public ArrayList<Integer> searchRange(final List<Integer> A, int B) {
        ArrayList<Integer> ans= new ArrayList<>();
        int f= firstocc(A,B );
        if(f==-1){
            ans.add(f);
            ans.add(f);
            return ans;
        }
        ans.add(f);
        ans.add(lastocc(A,B));
        return ans;
    }
}
