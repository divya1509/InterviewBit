public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    private static int firstOcc(final List<Integer> A, int B) {
        if(A.get(0) == B) return 0;
        int l = 0, r = A.size() - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if(A.get(mid) == B) {
                if(mid - 1 >= 0 && A.get(mid - 1) == B) r = mid - 1;
                else return mid;
            } else if(A.get(mid) > B) r = mid - 1;
            else l = mid + 1;
        }
        return -1;
    }
    
    private static int lastOcc(final List<Integer> A, int B) {
        if(A.get(A.size() - 1) == B) return A.size() - 1;
        int l = 0, r = A.size() - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if(A.get(mid) == B) {
                if(mid + 1 < A.size() && A.get(mid + 1) == B) l = mid + 1;
                else return mid;
            } else if(A.get(mid) > B) r = mid - 1;
            else l = mid + 1;
        }
        return -1;
    }
    
    public int findCount(final List<Integer> A, int B) {
        int first = firstOcc(A, B);
        int last = lastOcc(A, B);
        
        if(first == -1) return 0;
        else return last - first + 1; 
    }
}
