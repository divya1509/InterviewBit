public class Solution {
    private static boolean rowCheck(ArrayList<ArrayList<Character>> board, int cr){
        Set<Character> hs = new HashSet<>();
        for(int i = 0; i < board.get(0).size(); i++) {
            char ch = board.get(cr).get(i);
            if(ch == '.') continue;
            
            if(hs.contains(ch)) return false;
            hs.add(ch);
        }
        return true;
    }
    
    private static boolean colCheck(ArrayList<ArrayList<Character>> board, int cc){
        Set<Character> hs = new HashSet<>();
        for(int i = 0; i < board.size(); i++) {
            char ch = board.get(i).get(cc);
            if(ch == '.') continue;
            
            if(hs.contains(ch)) return false;
            hs.add(ch);
        }
        return true;
    }
    
    private static boolean box(ArrayList<ArrayList<Character>> board, int sr, int sc) {
        Set<Character> hs = new HashSet<>();
        for(int i = sr; i < sr + 3; i++) {
            for(int j = sc; j < sc + 3; j++) {
                char ch = board.get(i).get(j);
                if(ch == '.') continue;
                
                if(hs.contains(ch)) return false;
                hs.add(ch);
            }
        }
        return true;
    }
    
    private static boolean solve(ArrayList<ArrayList<Character>> board, int cr, int cc){
        if(cc == board.get(0).size() ){
            cr++;
            cc = 0;
        }
        if(cr == board.size() ){
            return true;
        }
        
        if(board.get(cr).get(cc) != '.') {
            return solve(board, cr, cc + 1);
        }
        int t = 0, y = 0;
        if (cr < 3) t = 0;
        else if(cr < 6) t = 3;
        else t = 6;
            
        if (cc < 3) y = 0;
        else if(cc < 6) y = 3;
        else y = 6;
        
        for (int i = 1; i < 10; i++) {
            board.get(cr).set(cc, (char)(i + '0'));
            boolean temp = false;
            if(rowCheck(board,cr) && colCheck(board,cc) && box(board,t,y)) {
                temp = solve(board, cr , cc + 1);
            }
            if(temp) return true;
            board.get(cr).set(cc, '.');
        }
        return false;
    }
    public void solveSudoku(ArrayList<ArrayList<Character>> a) {
        solve(a, 0 ,0);
    }
}
