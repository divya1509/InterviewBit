public class Solution {
    // public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> A) {
        // Collections.sort(A);
        
        // ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        // ans.add(new ArrayList<>());
        
        // for (int i = 0; i < A.size(); i++) {
        //     int n = ans.size();
        //     for(int j = 0; j < n; j++) {
        //         ArrayList<Integer> temp = new ArrayList<>();
        //         for (int ele : ans.get(j)) {
        //             temp.add(ele);
        //             // System.out.println("here 3");
        //         }
        //         temp.add(A.get(i));
        //         ans.add(temp);
        //         // System.out.println("here 2");
        //     }
        //     // System.out.println("here 1");
        // }
        // return ans;
        
        ArrayList<ArrayList<Integer>> output = new ArrayList();
        int n, k;

        public void backtrack(int first, ArrayList<Integer> curr, ArrayList<Integer> nums){
            if (curr.size() == k)
            output.add(new ArrayList(curr));

            for (int i = first; i < n; ++i) {
                
                curr.add(nums.get(i));
                
                backtrack(i + 1, curr, nums);
                
                curr.remove(curr.size() - 1);
            }
        }

        public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> nums) {
            n = nums.size();
            for (k = 0; k < n + 1; ++k) {
                backtrack(0, new ArrayList<Integer>(), nums);
            }
            return output;
        }
}
