public class Solution {
    private static void sol(ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> temp, 
                int idx, ArrayList<Integer> A, Set<ArrayList<Integer>> hs){
                   
        if(!hs.contains(temp)) {
                ArrayList<Integer> why = new ArrayList<Integer>(temp);
                ans.add(why);
                hs.add(why);
            }
         
        if (idx == A.size()) {
            return;
        }
        
        for(int i = idx; i < A.size(); i++) {
            // sol(ans, temp, i + 1, A, hs);
            
            temp.add(A.get(i) );
            sol(ans, temp, i + 1, A, hs);
            temp.remove(temp.size() - 1);
            
        }
    } 
    
    public ArrayList<ArrayList<Integer>> subsetsWithDup(ArrayList<Integer> A) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        ArrayList<Integer> temp = new ArrayList<>();
        Set<ArrayList<Integer>> hs = new HashSet<>();
        Collections.sort(A);
        // ans.add(new ArrayList<>());
        // for (int i = 0; i <= A.size(); i++) {
            sol(ans, temp, 0, A, hs);
        // }
        return ans;
        }
}
