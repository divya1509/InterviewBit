public class Solution {
    
    static int binarySearch( ArrayList<Integer> A, int l, int r, int x ){
        while(l<r){
            int mid= (l+r)/2;
            if(A.get(mid)>=x) r= mid-1;
            else l= mid+1;
        }
        return l;
    }
    
    public int nTriang(ArrayList<Integer> A) {
        int mod= 1000000007;
        int count = 0;
        Collections.sort(A);
        // for (int i = 0; i < A.size() - 2; i++) {
            // int k = i + 2;
            // for (int j = i + 1; j < A.size() - 1 && A.get(i) != 0; j++) {
            //     k = binarySearch(A, k, A.size() - 1, A.get(i) + A.get(j));
            //     count += k - j - 1;
            //     count%=mod;
            // }
            
        // }
        // return count;
        
        for (int i = 0; i < A.size() - 2; i++) {
            int k = i + 2;
            for (int j = i + 1; j < A.size() - 1 && A.get(i) != 0; j++) {
                while (k < A.size() && A.get(i) + A.get(j) > A.get(k))
                    k++;
                count += k - j - 1;
                count%=mod;
            }
        }
        return count;
    }
}
