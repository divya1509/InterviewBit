public class Solution {
   public String longestPalindrome(String str) {
        // if(s.length()==0 || s.length()==1) return s; 
        // boolean[][] dp= new boolean[s.length()][s.length()];
        
        // for(int i=0; i<s.length(); i++){
        //     for(int j=i,k=0; j<s.length() && k<s.length(); j++, k++ ){
        //         if(i==0) dp[k][j]= true;
        //         else if(i==1) {
        //             if(s.charAt(k)==s.charAt(j) ) dp[k][j]= true;
        //             else dp[k][j]= false;
        //         }else {
        //             if(s.charAt(k)==s.charAt(j) && dp[k+1][j-1] ) 
        //                 dp[k][j]= true;
        //             else dp[k][j]= 
        //         }
        //     }
        // }
        // return dp[0][s.length()-1];
        
        int n= str.length();
        boolean table[][] = new boolean[n][n]; 
  
        // All substrings of length 1 are palindromes 
        int maxLength = 1; 
        for (int i = 0; i < n; ++i) 
            table[i][i] = true; 
  
        // check for sub-string of length 2. 
        int start = 0; 
        for (int i = 0; i < n - 1; ++i) { 
            if (str.charAt(i) == str.charAt(i + 1)) { 
                table[i][i + 1] = true; 
                start = i; 
                maxLength = 2; 
            } 
        } 
          
        // Check for lengths greater than 2. k is length 
        // of substring 
        for (int k = 3; k <= n; ++k) { 
              
                  // Fix the starting index 
            for (int i = 0; i < n - k + 1; ++i)  
            { 
                // Get the ending index of substring from 
                // starting index i and length k 
                int j = i + k - 1; 
  
                // checking for sub-string from ith index to 
                // jth index iff str.charAt(i+1) to  
                // str.charAt(j-1) is a palindrome 
                if (table[i + 1][j - 1] && str.charAt(i) ==  
                                          str.charAt(j)) { 
                    table[i][j] = true; 
  
                    if (k > maxLength) { 
                        start = i; 
                        maxLength = k; 
                    } 
                } 
            } 
        } 
        
        return str.substring(start, start + maxLength);
}


}

